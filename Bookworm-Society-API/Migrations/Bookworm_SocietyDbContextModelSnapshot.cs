// <auto-generated />
using System;
using Bookworm_Society_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bookworm_Society_API.Migrations
{
    [DbContext(typeof(Bookworm_SocietyDbContext))]
    partial class Bookworm_SocietyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookBookClub", b =>
                {
                    b.Property<int>("BookClubsId")
                        .HasColumnType("integer");

                    b.Property<int>("HaveReadId")
                        .HasColumnType("integer");

                    b.HasKey("BookClubsId", "HaveReadId");

                    b.HasIndex("HaveReadId");

                    b.ToTable("BookClubsHaveReadBook", (string)null);
                });

            modelBuilder.Entity("BookClubUser", b =>
                {
                    b.Property<int>("MemberBookClubsId")
                        .HasColumnType("integer");

                    b.Property<int>("MembersId")
                        .HasColumnType("integer");

                    b.HasKey("MemberBookClubsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("UserBookClubMembership", (string)null);
                });

            modelBuilder.Entity("BookVotingSession", b =>
                {
                    b.Property<int>("VotingBooksId")
                        .HasColumnType("integer");

                    b.Property<int>("VotingSessionsId")
                        .HasColumnType("integer");

                    b.HasKey("VotingBooksId", "VotingSessionsId");

                    b.HasIndex("VotingSessionsId");

                    b.ToTable("VotingSessionBooks", (string)null);
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Author = "Harper Lee",
                            Description = "A novel about the serious issues of rape and racial inequality.",
                            Genre = "Historical Fiction",
                            ImageUrl = "https://example.com/mock.jpg",
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = 102,
                            Author = "J.R.R. Tolkien",
                            Description = "A journey through Middle-earth with Bilbo Baggins.",
                            Genre = "Fantasy",
                            ImageUrl = "https://example.com/hobbit.jpg",
                            Title = "The Hobbit"
                        },
                        new
                        {
                            Id = 103,
                            Author = "Frank Herbert",
                            Description = "A science fiction epic about politics, religion, and survival on the desert planet Arrakis.",
                            Genre = "Science Fiction",
                            ImageUrl = "https://example.com/dune.jpg",
                            Title = "Dune"
                        },
                        new
                        {
                            Id = 104,
                            Author = "Gillian Flynn",
                            Description = "A psychological thriller about marriage and betrayal.",
                            Genre = "Mystery",
                            ImageUrl = "https://example.com/gonegirl.jpg",
                            Title = "Gone Girl"
                        },
                        new
                        {
                            Id = 105,
                            Author = "Jane Austen",
                            Description = "A romantic novel about the manners and matrimonial machinations of early 19th century England.",
                            Genre = "Romance",
                            ImageUrl = "https://example.com/pride.jpg",
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 106,
                            Author = "Markus Zusak",
                            Description = "The story of a young girl who steals books in Nazi Germany.",
                            Genre = "Historical Fiction",
                            ImageUrl = "https://example.com/thief.jpg",
                            Title = "The Book Thief"
                        },
                        new
                        {
                            Id = 107,
                            Author = "Stieg Larsson",
                            Description = "A gripping thriller involving murder, mystery, and family secrets.",
                            Genre = "Thriller",
                            ImageUrl = "https://example.com/dragon.jpg",
                            Title = "The Girl with the Dragon Tattoo"
                        },
                        new
                        {
                            Id = 108,
                            Author = "Shirley Jackson",
                            Description = "A chilling tale of psychological horror and supernatural events.",
                            Genre = "Horror",
                            ImageUrl = "https://example.com/hillhouse.jpg",
                            Title = "The Haunting of Hill House"
                        },
                        new
                        {
                            Id = 109,
                            Author = "Paulo Coelho",
                            Description = "A tale of self-discovery and pursuing one's dreams.",
                            Genre = "Slice of Life",
                            ImageUrl = "https://example.com/alchemist.jpg",
                            Title = "The Alchemist"
                        },
                        new
                        {
                            Id = 110,
                            Author = "Bram Stoker",
                            Description = "The classic vampire novel about the infamous Count Dracula.",
                            Genre = "Horror",
                            ImageUrl = "https://example.com/dracula.jpg",
                            Title = "Dracula"
                        },
                        new
                        {
                            Id = 111,
                            Author = "J.D. Salinger",
                            Description = "A story about teenage rebellion and angst.",
                            Genre = "Drama",
                            ImageUrl = "https://example.com/catcher.jpg",
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            Id = 112,
                            Author = "Cormac McCarthy",
                            Description = "A post-apocalyptic novel about a father and son journeying through a devastated America.",
                            Genre = "Adventure",
                            ImageUrl = "https://example.com/road.jpg",
                            Title = "The Road"
                        },
                        new
                        {
                            Id = 113,
                            Author = "J.K. Rowling",
                            Description = "The beginning of Harry Potter's journey in the wizarding world.",
                            Genre = "Fantasy",
                            ImageUrl = "https://example.com/harry.jpg",
                            Title = "Harry Potter and the Sorcerer's Stone"
                        },
                        new
                        {
                            Id = 114,
                            Author = "George Orwell",
                            Description = "A dystopian novel about totalitarianism and surveillance.",
                            Genre = "Science Fiction",
                            ImageUrl = "https://example.com/1984.jpg",
                            Title = "1984"
                        },
                        new
                        {
                            Id = 115,
                            Author = "F. Scott Fitzgerald",
                            Description = "A critique of the American Dream in the Jazz Age.",
                            Genre = "Drama",
                            ImageUrl = "https://example.com/gatsby.jpg",
                            Title = "The Great Gatsby"
                        });
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.BookClub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HostId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MeetUpType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("HostId");

                    b.ToTable("BookClubs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 101,
                            DateCreated = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A club for avid readers of classic literature.",
                            HostId = 1,
                            ImageUrl = "https://example.com/club1.jpg",
                            MeetUpType = "Online",
                            Name = "Literary Legends"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 102,
                            DateCreated = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Discussing all things fantasy and magical worlds.",
                            HostId = 2,
                            ImageUrl = "https://example.com/club2.jpg",
                            MeetUpType = "In-Person",
                            Name = "Fantasy Fanatics"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 103,
                            DateCreated = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Exploring science fiction novels and ideas.",
                            HostId = 3,
                            ImageUrl = "https://example.com/club3.jpg",
                            MeetUpType = "Hybrid",
                            Name = "Sci-Fi Society"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 104,
                            DateCreated = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "For fans of thrilling mysteries and crime stories.",
                            HostId = 4,
                            ImageUrl = "https://example.com/club4.jpg",
                            MeetUpType = "Online",
                            Name = "Mystery Maniacs"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 105,
                            DateCreated = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A group dedicated to the best romance novels.",
                            HostId = 5,
                            ImageUrl = "https://example.com/club5.jpg",
                            MeetUpType = "In-Person",
                            Name = "Romance Readers"
                        },
                        new
                        {
                            Id = 6,
                            BookId = 106,
                            DateCreated = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Delve into historical fiction with fellow enthusiasts.",
                            HostId = 6,
                            ImageUrl = "https://example.com/club6.jpg",
                            MeetUpType = "Online",
                            Name = "Historical Tales"
                        },
                        new
                        {
                            Id = 7,
                            BookId = 107,
                            DateCreated = new DateTime(2023, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intense thrillers and gripping reads every week.",
                            HostId = 7,
                            ImageUrl = "https://example.com/club7.jpg",
                            MeetUpType = "Hybrid",
                            Name = "Thriller Thursdays"
                        },
                        new
                        {
                            Id = 8,
                            BookId = 108,
                            DateCreated = new DateTime(2023, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Exploring supernatural and paranormal fiction.",
                            HostId = 8,
                            ImageUrl = "https://example.com/club8.jpg",
                            MeetUpType = "In-Person",
                            Name = "Supernatural Circle"
                        },
                        new
                        {
                            Id = 9,
                            BookId = 109,
                            DateCreated = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Heartwarming stories and everyday adventures.",
                            HostId = 9,
                            ImageUrl = "https://example.com/club9.jpg",
                            MeetUpType = "Online",
                            Name = "Slice of Life"
                        },
                        new
                        {
                            Id = 10,
                            BookId = 110,
                            DateCreated = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Spooky tales and scary reads for brave souls.",
                            HostId = 10,
                            ImageUrl = "https://example.com/club10.jpg",
                            MeetUpType = "Hybrid",
                            Name = "Horror House"
                        });
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "I loved how Atticus stood up for what was right, even when it wasn’t popular. Truly inspiring.",
                            CreatedDate = new DateTime(2023, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Content = "Yeah, I agree! But I think the real hero was Scout, learning the world through her eyes was fascinating.",
                            CreatedDate = new DateTime(2023, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Content = "Bilbo was a true hero in this story, even though he didn’t see himself as one. The Smaug scene was amazing!",
                            CreatedDate = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Content = "I think Bilbo's journey is so relatable. It shows that you don’t have to be the strongest to do great things.",
                            CreatedDate = new DateTime(2023, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Content = "I found Paul’s transformation overwhelming but fascinating. The world-building in 'Dune' is unreal!",
                            CreatedDate = new DateTime(2023, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 3,
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Content = "The politics and the family dynamics are a lot to keep up with, but I’m loving the complexity!",
                            CreatedDate = new DateTime(2023, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 3,
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Content = "The ending was shocking, but I feel like it was a bit too far-fetched. It didn’t sit well with me.",
                            CreatedDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 4,
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Content = "I loved how unpredictable it was. It made me rethink everything about the characters.",
                            CreatedDate = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 4,
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Content = "Darcy’s confession scene is my absolute favorite. The tension between them is perfect.",
                            CreatedDate = new DateTime(2023, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 5,
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Content = "Elizabeth’s wit makes her so charming, but Darcy’s growth is what truly won me over.",
                            CreatedDate = new DateTime(2023, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 5,
                            UserId = 11
                        },
                        new
                        {
                            Id = 11,
                            Content = "The perspective from Death was haunting, yet it gave the story a deeper emotional layer.",
                            CreatedDate = new DateTime(2023, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 6,
                            UserId = 12
                        },
                        new
                        {
                            Id = 12,
                            Content = "I agree! Death as a narrator was such a unique touch, and it added a lot of depth to the story.",
                            CreatedDate = new DateTime(2023, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 6,
                            UserId = 13
                        },
                        new
                        {
                            Id = 13,
                            Content = "The twists were mind-blowing. It kept me on the edge of my seat the entire time.",
                            CreatedDate = new DateTime(2023, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 7,
                            UserId = 14
                        },
                        new
                        {
                            Id = 14,
                            Content = "I didn’t see the ending coming at all! It’s definitely one of those books you can’t stop thinking about.",
                            CreatedDate = new DateTime(2023, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 7,
                            UserId = 15
                        },
                        new
                        {
                            Id = 15,
                            Content = "I couldn’t put it down, but I was seriously creeped out. The atmosphere was perfect for a horror story.",
                            CreatedDate = new DateTime(2023, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 8,
                            UserId = 1
                        },
                        new
                        {
                            Id = 16,
                            Content = "Hill House was so much more than just a haunted house. The psychological elements made it so unsettling.",
                            CreatedDate = new DateTime(2023, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 8,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookClubId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookClubId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookClubId = 1,
                            Content = "I just finished 'To Kill a Mockingbird' and can't stop thinking about it! What did everyone else think about Atticus's approach to justice?",
                            CreatedDate = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEdited = false,
                            IsPinned = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookClubId = 2,
                            Content = "Who else loved Bilbo's bravery in 'The Hobbit'? That scene with Smaug was incredible!",
                            CreatedDate = new DateTime(2023, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEdited = true,
                            IsPinned = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookClubId = 3,
                            Content = "'Dune' has such an intricate plot! Does anyone else find Paul Atreides's journey inspiring or overwhelming?",
                            CreatedDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEdited = false,
                            IsPinned = true,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            BookClubId = 4,
                            Content = "The twists in 'Gone Girl' left me reeling. How did you all interpret the ending?",
                            CreatedDate = new DateTime(2023, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEdited = false,
                            IsPinned = false,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            BookClubId = 5,
                            Content = "Pride and Prejudice is so timeless. What are your favorite Darcy and Elizabeth moments?",
                            CreatedDate = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEdited = true,
                            IsPinned = false,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            BookClubId = 6,
                            Content = "The storytelling in 'The Book Thief' is so unique. What did you think of the perspective from Death?",
                            CreatedDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEdited = false,
                            IsPinned = true,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            BookClubId = 7,
                            Content = "I'm still thinking about 'The Girl with the Dragon Tattoo.' Who else was blown away by the investigation twists?",
                            CreatedDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEdited = false,
                            IsPinned = false,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            BookClubId = 8,
                            Content = "The eerie atmosphere of 'The Haunting of Hill House' was so vivid! Who else couldn't sleep after reading it?",
                            CreatedDate = new DateTime(2023, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEdited = true,
                            IsPinned = false,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            BookClubId = 9,
                            Content = "I just finished '1984' and I’m still trying to process the dystopian world. How did you interpret Winston’s rebellion?",
                            CreatedDate = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEdited = false,
                            IsPinned = false,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            BookClubId = 10,
                            Content = "I can’t get over the plot twists in 'The Catcher in the Rye.' Did anyone else find Holden’s perspective on life relatable?",
                            CreatedDate = new DateTime(2023, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEdited = false,
                            IsPinned = false,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 101,
                            Content = "An impactful story that captures the essence of justice and morality.",
                            CreatedDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 102,
                            Content = "A magical adventure filled with charming characters and vivid landscapes.",
                            CreatedDate = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 103,
                            Content = "Intricate world-building and a gripping tale of power and survival.",
                            CreatedDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 4,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            BookId = 104,
                            Content = "Twists and turns that keep you guessing until the very end.",
                            CreatedDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            BookId = 105,
                            Content = "A delightful exploration of love, class, and character in Regency England.",
                            CreatedDate = new DateTime(2023, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            BookId = 106,
                            Content = "A heart-wrenching yet inspiring story set during a dark time in history.",
                            CreatedDate = new DateTime(2023, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            BookId = 107,
                            Content = "Dark, gripping, and impossible to put down.",
                            CreatedDate = new DateTime(2023, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 4,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            BookId = 108,
                            Content = "A masterpiece of psychological horror that lingers with you.",
                            CreatedDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            BookId = 109,
                            Content = "A simple yet profound story that inspires self-discovery and hope.",
                            CreatedDate = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 4,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            BookId = 110,
                            Content = "A chilling classic that set the standard for gothic horror.",
                            CreatedDate = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5,
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            BookId = 111,
                            Content = "Raw, emotional, and an unforgettable look into teenage life.",
                            CreatedDate = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 4,
                            UserId = 11
                        },
                        new
                        {
                            Id = 12,
                            BookId = 112,
                            Content = "Hauntingly beautiful and thought-provoking.",
                            CreatedDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5,
                            UserId = 12
                        },
                        new
                        {
                            Id = 13,
                            BookId = 113,
                            Content = "A magical start to an epic series that captivates readers of all ages.",
                            CreatedDate = new DateTime(2023, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5,
                            UserId = 13
                        },
                        new
                        {
                            Id = 14,
                            BookId = 114,
                            Content = "A chilling and prescient look at a dystopian future.",
                            CreatedDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5,
                            UserId = 14
                        },
                        new
                        {
                            Id = 15,
                            BookId = 115,
                            Content = "A beautifully written critique of the American Dream.",
                            CreatedDate = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 4,
                            UserId = 15
                        },
                        new
                        {
                            Id = 16,
                            BookId = 101,
                            Content = "While important, the pacing felt uneven, and some characters seemed underdeveloped.",
                            CreatedDate = new DateTime(2023, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 17,
                            BookId = 102,
                            Content = "Overly descriptive passages bogged down the story's momentum.",
                            CreatedDate = new DateTime(2023, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 18,
                            BookId = 103,
                            Content = "Fascinating ideas, but the dense writing style made it difficult to stay engaged.",
                            CreatedDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 3,
                            UserId = 6
                        },
                        new
                        {
                            Id = 19,
                            BookId = 104,
                            Content = "The characters felt unrelatable and the ending was unsatisfying.",
                            CreatedDate = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 2,
                            UserId = 8
                        },
                        new
                        {
                            Id = 20,
                            BookId = 105,
                            Content = "While classic, the social satire feels outdated and struggles to resonate with modern audiences.",
                            CreatedDate = new DateTime(2023, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 3,
                            UserId = 10
                        },
                        new
                        {
                            Id = 21,
                            BookId = 114,
                            Content = "The philosophical themes often overshadowed the plot, leaving some parts dry and uninteresting.",
                            CreatedDate = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 2,
                            UserId = 12
                        });
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Alice",
                            ImageUrl = "https://example.com/alice.jpg",
                            JoinedDate = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Johnson",
                            Uid = "UID12345",
                            Username = "alicej"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Bob",
                            ImageUrl = "https://example.com/bob.jpg",
                            JoinedDate = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Smith",
                            Uid = "UID67890",
                            Username = "bobsmith"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Charlie",
                            ImageUrl = "https://example.com/charlie.jpg",
                            JoinedDate = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Brown",
                            Uid = "UID24680",
                            Username = "charlieb"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Diana",
                            ImageUrl = "https://example.com/diana.jpg",
                            JoinedDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Prince",
                            Uid = "UID13579",
                            Username = "dianap"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Edward",
                            ImageUrl = "https://example.com/edward.jpg",
                            JoinedDate = new DateTime(2023, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Elric",
                            Uid = "UID11223",
                            Username = "edwarde"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Fiona",
                            ImageUrl = "https://example.com/fiona.jpg",
                            JoinedDate = new DateTime(2023, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Hill",
                            Uid = "UID44556",
                            Username = "fionah"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "George",
                            ImageUrl = "https://example.com/george.jpg",
                            JoinedDate = new DateTime(2023, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Harrison",
                            Uid = "UID77889",
                            Username = "georgeh"
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Hannah",
                            ImageUrl = "https://example.com/hannah.jpg",
                            JoinedDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Montana",
                            Uid = "UID99101",
                            Username = "hannahm"
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "Ian",
                            ImageUrl = "https://example.com/ian.jpg",
                            JoinedDate = new DateTime(2022, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Curtis",
                            Uid = "UID22334",
                            Username = "ianc"
                        },
                        new
                        {
                            Id = 10,
                            FirstName = "Jill",
                            ImageUrl = "https://example.com/jill.jpg",
                            JoinedDate = new DateTime(2022, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Valentine",
                            Uid = "UID55667",
                            Username = "jillv"
                        },
                        new
                        {
                            Id = 11,
                            FirstName = "Kyle",
                            ImageUrl = "https://example.com/kyle.jpg",
                            JoinedDate = new DateTime(2022, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Reese",
                            Uid = "UID77880",
                            Username = "kyler"
                        },
                        new
                        {
                            Id = 12,
                            FirstName = "Laura",
                            ImageUrl = "https://example.com/laura.jpg",
                            JoinedDate = new DateTime(2022, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Croft",
                            Uid = "UID99112",
                            Username = "laurac"
                        },
                        new
                        {
                            Id = 13,
                            FirstName = "Mike",
                            ImageUrl = "https://example.com/mike.jpg",
                            JoinedDate = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Tyson",
                            Uid = "UID22344",
                            Username = "miket"
                        },
                        new
                        {
                            Id = 14,
                            FirstName = "Nina",
                            ImageUrl = "https://example.com/nina.jpg",
                            JoinedDate = new DateTime(2022, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Williams",
                            Uid = "UID55678",
                            Username = "ninaw"
                        },
                        new
                        {
                            Id = 15,
                            FirstName = "Oscar",
                            ImageUrl = "https://example.com/oscar.jpg",
                            JoinedDate = new DateTime(2022, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Wilde",
                            Uid = "UID77891",
                            Username = "oscarw"
                        });
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VotingSessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.HasIndex("VotingSessionId");

                    b.ToTable("Votes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 101,
                            UserId = 1,
                            VotingSessionId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 102,
                            UserId = 2,
                            VotingSessionId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 103,
                            UserId = 3,
                            VotingSessionId = 1
                        },
                        new
                        {
                            Id = 4,
                            BookId = 104,
                            UserId = 2,
                            VotingSessionId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookId = 105,
                            UserId = 4,
                            VotingSessionId = 2
                        },
                        new
                        {
                            Id = 6,
                            BookId = 106,
                            UserId = 5,
                            VotingSessionId = 2
                        },
                        new
                        {
                            Id = 7,
                            BookId = 107,
                            UserId = 3,
                            VotingSessionId = 3
                        },
                        new
                        {
                            Id = 8,
                            BookId = 108,
                            UserId = 6,
                            VotingSessionId = 3
                        },
                        new
                        {
                            Id = 9,
                            BookId = 109,
                            UserId = 4,
                            VotingSessionId = 4
                        },
                        new
                        {
                            Id = 10,
                            BookId = 110,
                            UserId = 7,
                            VotingSessionId = 4
                        },
                        new
                        {
                            Id = 11,
                            BookId = 111,
                            UserId = 5,
                            VotingSessionId = 5
                        },
                        new
                        {
                            Id = 12,
                            BookId = 112,
                            UserId = 8,
                            VotingSessionId = 5
                        },
                        new
                        {
                            Id = 13,
                            BookId = 113,
                            UserId = 6,
                            VotingSessionId = 6
                        },
                        new
                        {
                            Id = 14,
                            BookId = 114,
                            UserId = 9,
                            VotingSessionId = 6
                        });
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.VotingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookClubId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("VotingEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("VotingStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("WinningBookId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookClubId");

                    b.HasIndex("WinningBookId");

                    b.ToTable("VotingSessions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookClubId = 1,
                            IsActive = true,
                            VotingEndDate = new DateTime(2023, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VotingStartDate = new DateTime(2023, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            BookClubId = 2,
                            IsActive = true,
                            VotingEndDate = new DateTime(2023, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VotingStartDate = new DateTime(2023, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            BookClubId = 3,
                            IsActive = false,
                            VotingEndDate = new DateTime(2023, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VotingStartDate = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WinningBookId = 107
                        },
                        new
                        {
                            Id = 4,
                            BookClubId = 4,
                            IsActive = true,
                            VotingEndDate = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VotingStartDate = new DateTime(2023, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            BookClubId = 5,
                            IsActive = false,
                            VotingEndDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VotingStartDate = new DateTime(2023, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WinningBookId = 113
                        },
                        new
                        {
                            Id = 6,
                            BookClubId = 6,
                            IsActive = true,
                            VotingEndDate = new DateTime(2023, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VotingStartDate = new DateTime(2023, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookBookClub", b =>
                {
                    b.HasOne("Bookworm_Society_API.Models.BookClub", null)
                        .WithMany()
                        .HasForeignKey("BookClubsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm_Society_API.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("HaveReadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookClubUser", b =>
                {
                    b.HasOne("Bookworm_Society_API.Models.BookClub", null)
                        .WithMany()
                        .HasForeignKey("MemberBookClubsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm_Society_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookVotingSession", b =>
                {
                    b.HasOne("Bookworm_Society_API.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("VotingBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm_Society_API.Models.VotingSession", null)
                        .WithMany()
                        .HasForeignKey("VotingSessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.BookClub", b =>
                {
                    b.HasOne("Bookworm_Society_API.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bookworm_Society_API.Models.User", "Host")
                        .WithMany("HostedBookClubs")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.Comment", b =>
                {
                    b.HasOne("Bookworm_Society_API.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm_Society_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.Post", b =>
                {
                    b.HasOne("Bookworm_Society_API.Models.BookClub", "BookClub")
                        .WithMany("Posts")
                        .HasForeignKey("BookClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm_Society_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookClub");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.Review", b =>
                {
                    b.HasOne("Bookworm_Society_API.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm_Society_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.Vote", b =>
                {
                    b.HasOne("Bookworm_Society_API.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm_Society_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm_Society_API.Models.VotingSession", "VotingSession")
                        .WithMany("Votes")
                        .HasForeignKey("VotingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");

                    b.Navigation("VotingSession");
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.VotingSession", b =>
                {
                    b.HasOne("Bookworm_Society_API.Models.BookClub", "BookClub")
                        .WithMany("VotingSessions")
                        .HasForeignKey("BookClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm_Society_API.Models.Book", "WinningBook")
                        .WithMany()
                        .HasForeignKey("WinningBookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BookClub");

                    b.Navigation("WinningBook");
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.Book", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.BookClub", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("VotingSessions");
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.User", b =>
                {
                    b.Navigation("HostedBookClubs");
                });

            modelBuilder.Entity("Bookworm_Society_API.Models.VotingSession", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
